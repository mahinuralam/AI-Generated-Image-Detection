{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":5256696,"sourceType":"datasetVersion","datasetId":3041726}],"dockerImageVersionId":30627,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom tensorflow import keras\n\nimage_size = (32, 32)\n\n# load dataset\ntrain_dataset = keras.utils.image_dataset_from_directory(\n    \"/kaggle/input/cifake-real-and-ai-generated-synthetic-images/train\",\n    image_size=image_size,\n    label_mode=\"binary\",\n)\ntest_dataset = keras.utils.image_dataset_from_directory(\n    \"/kaggle/input/cifake-real-and-ai-generated-synthetic-images/test\",\n    image_size=image_size,\n    label_mode=\"binary\",\n)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-09T15:47:00.954166Z","iopub.execute_input":"2024-04-09T15:47:00.954571Z","iopub.status.idle":"2024-04-09T15:48:12.025354Z","shell.execute_reply.started":"2024-04-09T15:47:00.954540Z","shell.execute_reply":"2024-04-09T15:48:12.024579Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\n\n# offload most images to disk\ntrain_dataset = train_dataset.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)\ntest_dataset = test_dataset.cache().prefetch(buffer_size=tf.data.AUTOTUNE)","metadata":{"execution":{"iopub.status.busy":"2024-04-09T15:48:43.741153Z","iopub.execute_input":"2024-04-09T15:48:43.741535Z","iopub.status.idle":"2024-04-09T15:48:43.749610Z","shell.execute_reply.started":"2024-04-09T15:48:43.741504Z","shell.execute_reply":"2024-04-09T15:48:43.748672Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.layers import Dense\n\nmodel = keras.models.Sequential([\n    keras.applications.EfficientNetV2B0(input_shape=(image_size + (3,)), pooling=\"max\", include_top=False), # use pretrained imagenet weights\n    Dense(128, activation=\"relu\"),\n    Dense(256, activation=\"relu\"),\n    Dense(1, activation=\"sigmoid\"), # generate probability of real (value of 1) or AI (value of 0)\n])\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-04-09T15:48:47.690327Z","iopub.execute_input":"2024-04-09T15:48:47.691038Z","iopub.status.idle":"2024-04-09T15:48:53.894104Z","shell.execute_reply.started":"2024-04-09T15:48:47.691004Z","shell.execute_reply":"2024-04-09T15:48:53.893194Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras import callbacks\n\nmodel.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n\nhistory = model.fit(train_dataset, validation_data=test_dataset, epochs=10, callbacks=[callbacks.EarlyStopping()])","metadata":{"execution":{"iopub.status.busy":"2024-04-09T15:48:58.865785Z","iopub.execute_input":"2024-04-09T15:48:58.866701Z","iopub.status.idle":"2024-04-09T16:02:36.369099Z","shell.execute_reply.started":"2024-04-09T15:48:58.866657Z","shell.execute_reply":"2024-04-09T16:02:36.368083Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Plot the training and validation accuracy\ntrain_accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\n# Plot the training and validation accuracy\nplt.plot(range(1, len(train_accuracy) + 1), train_accuracy, label='Training Accuracy')\nplt.plot(range(1, len(val_accuracy) + 1), val_accuracy, label='Validation Accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\nplt.show()\n\n# Plot the training and validation loss using a logarithmic scale\nplt.plot(range(1, len(train_loss) + 1), np.log(train_loss), label='Training Loss')\nplt.plot(range(1, len(val_loss) + 1), np.log(val_loss), label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Log Loss')\nplt.title('Training and Validation Loss (Log Scale)')\nplt.legend()\nplt.show()\n\n# Save the accuracy plot as an image\nplt.savefig('accuracy_plot.png', bbox_inches='tight')\n\n# Calculate and display the best validation accuracy and loss\nbest_val_accuracy = max(val_accuracy)\nbest_val_loss = min(val_loss)\nprint(f'Best Validation Accuracy: {best_val_accuracy:.4f}')\nprint(f'Best Validation Loss: {best_val_loss:.4f}')","metadata":{"execution":{"iopub.status.busy":"2024-04-09T16:26:35.937192Z","iopub.execute_input":"2024-04-09T16:26:35.938029Z","iopub.status.idle":"2024-04-09T16:26:36.583458Z","shell.execute_reply.started":"2024-04-09T16:26:35.937994Z","shell.execute_reply":"2024-04-09T16:26:36.582521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n# Make predictions on the test dataset\ny_pred = model.predict(test_dataset).round()\n\n# Extract true labels from the test dataset\ny_true = np.concatenate([y for x, y in test_dataset], axis=0)\n\n# Calculate confusion matrix\nconf_matrix = confusion_matrix(y_true, y_pred)\n\n# Plot confusion matrix\nplt.figure(figsize=(8, 6))\nsns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['AI Generated', 'Real'], yticklabels=['AI Generated', 'Real'])\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-09T16:34:25.400310Z","iopub.execute_input":"2024-04-09T16:34:25.400749Z","iopub.status.idle":"2024-04-09T16:34:33.480383Z","shell.execute_reply.started":"2024-04-09T16:34:25.400720Z","shell.execute_reply":"2024-04-09T16:34:33.479466Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# test model on samples\nsample_real = keras.utils.img_to_array(\n    keras.utils.load_img(\"/kaggle/input/cifake-real-and-ai-generated-synthetic-images/test/REAL/0000.jpg\")\n)\nsample_fake = keras.utils.img_to_array(\n    keras.utils.load_img(\"/kaggle/input/cifake-real-and-ai-generated-synthetic-images/test/FAKE/0 (2).jpg\")\n)\n\ninput_arr = np.array([sample_real, sample_fake])\npredictions = model.predict(input_arr)\n\nprint(\"Real image, predicted:\", \"real ✅\" if round(predictions[0][0]) else \"fake ❌\")\nprint(\"Fake image, predicted:\", \"real ❌\" if round(predictions[1][0]) else \"fake ✅\")","metadata":{"execution":{"iopub.status.busy":"2024-04-09T16:34:39.362032Z","iopub.execute_input":"2024-04-09T16:34:39.362950Z","iopub.status.idle":"2024-04-09T16:34:41.431907Z","shell.execute_reply.started":"2024-04-09T16:34:39.362913Z","shell.execute_reply":"2024-04-09T16:34:41.430874Z"},"trusted":true},"execution_count":null,"outputs":[]}]}